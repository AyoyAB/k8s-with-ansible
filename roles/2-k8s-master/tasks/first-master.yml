- name: first-master - Reset Kubernetes component
  become: yes
  shell: |
    kubeadm reset \
      --force
  register: reset_cluster

- name: first-master - Flush iptables
  become: true
  shell: |
    iptables --flush && \
    iptables -tnat --flush

- name: first-master - Init Kubernetes cluster on first master
  become: yes
  when: reset_cluster is succeeded
  shell: |
    kubeadm init \
      --service-cidr {{ service_cidr }} \
      --kubernetes-version {{ kubernetes_version }} \
      --pod-network-cidr {{ pod_network_cidr }} \
      --token {{ token }} \
      --apiserver-advertise-address {{ master_ip }} \
      --upload-certs \
      --control-plane-endpoint {{ kube_api_endpoint }}:6443 \
      {{ kubeadm_opts }} \
      {{ init_opts }}
  vars:
    service_cidr:     "10.96.0.0/12"
    pod_network_cidr: "10.244.0.0/16"
    master_ip:        "0.0.0.0"
    kubeadm_opts:     "--token-ttl 0 "
    init_opts:        ""
  register: init_cluster

- debug: var=init_cluster.stdout_lines

- set_fact:
    certificate_key: "{{ init_cluster.stdout | regex_search(regexp,'\\1') }}"
  vars:
    regexp: '--certificate-key ([a-f0-9]*)'

- debug: var=certificate_key

- name: first-master - Create Kubernetes config directory
  become: yes
  file:
    path: ".kube/"
    state: directory

- name: first-master - Copy admin config to Home directory
  become: yes
  when: init_cluster is succeeded
  copy:
    src: "{{ kubeadmin_config }}"
    dest: ".kube/config"
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode: 0600
    remote_src: true

- name: first-master - Copy admin config to ansible machine
  become: false
  ansible.builtin.fetch:
    src: "~/.kube/config"
    dest: /Users/john/Projects/ayoy/k8s-with-ansible/k8s-files/auth/config
    flat: yes

- include_tasks: "probes-api.yaml"

- name: first-master - Wait before checking if the system is ok.
  pause:
    seconds: 60

- include_tasks: probes-api.yaml

#####################################
- include_tasks: "cni-weave.yml"
  when: k8s_cni == "weave"

#####################################

- name: first-master - Wait before checking if the system is ok.
  pause:
    seconds: 180

- include_tasks: probes-api.yaml
- include_tasks: all-pods-running.yaml

- name: first-master - Wait for the DNS to be started (which is implicit that the overlay network works) before joining the other masters.
  shell: "kubectl -n kube-system get deploy coredns -o json | jq '.status.readyReplicas'"
  changed_when: false
  register: numberReady
  until: numberReady.stdout|int > 0
  retries: 120
  delay: 10
