- name: First-master - Reset Kubernetes component
  become: true
  ansible.builtin.shell: |
    kubeadm reset \
      --force
  register: reset_cluster
  changed_when: true

- name: First-master - Flush iptables
  become: true
  ansible.builtin.shell: |
    iptables --flush && \
    iptables -tnat --flush
  changed_when: true

- name: First-master - Copy kubeadm config
  ansible.builtin.template:
    src: templates/kubeadm-first-master.yaml.j2
    dest: kubeadm.yaml
  vars:
    service_cidr:     "10.96.0.0/12"
    master_ip:        "0.0.0.0"

- name: First-master - Init Kubernetes cluster on first master
  become: true
  when: reset_cluster is succeeded
  ansible.builtin.shell: |
    kubeadm init \
      --config kubeadm.yaml \
      --upload-certs
  vars:
    service_cidr:     "10.96.0.0/12"
    master_ip:        "0.0.0.0"
    kubeadm_opts:     "--token-ttl 0 "
    init_opts:        ""
  register: init_cluster
  changed_when: true

- ansible.builtin.debug:
    var: init_cluster.stdout_lines

- ansible.builtin.set_fact:
    certificate_key: "{{ init_cluster.stdout | regex_search(regexp,'\\1') }}"
  vars:
    regexp: '--certificate-key ([a-f0-9]*)'

- ansible.builtin.debug: var=certificate_key

- name: First-master - Create Kubernetes config directory
  become: true
  ansible.builtin.file:
    path: ".kube/"
    state: directory

- name: First-master - Copy admin config to Home directory
  become: true
  when: init_cluster is succeeded
  ansible.builtin.copy:
    src: "{{ kubeadmin_config }}"
    dest: ".kube/config"
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode: 0600
    remote_src: true

- name: First-master - Copy admin config to ansible machine
  become: false
  ansible.builtin.fetch:
    src: "~/.kube/config"
    dest: "{{ k8s_files_kubeconfig }}"
    flat: yes

- name: First-master - Approve kubelet certificates
  delegate_to: localhost
  ansible.builtin.shell:
    cmd: |
      kubectl --kubeconfig {{ k8s_files_kubeconfig }} \
        get csr \
        -o json |\
      jq -r '.items[] | select (.status.conditions == null) | .metadata.name'  |\
      xargs kubectl --kubeconfig {{ k8s_files_kubeconfig }} \
        certificate approve
  register: certificate_approval
  changed_when: '" approved" in certificate_approval.stdout'

- ansible.builtin.include_tasks: "probes-api.yaml"

- name: First-master - Wait before checking if the system is ok again.
  ansible.builtin.pause:
    seconds: 60

- ansible.builtin.include_tasks: probes-api.yaml

#####################################
- ansible.builtin.include_tasks: "cni-calico.yml"
  when: k8s_cni == "calico"

- ansible.builtin.include_tasks: "cni-weave.yml"
  when: k8s_cni == "weave"

- when:
    - k8s_cni != "calico"
    - k8s_cni != "weave"
  ansible.builtin.fail:
    msg: "Unsupported CNI configuration: {{ k8s_cni }}"
#####################################

- name: First-master - Wait for network installation before checking if the system is ok.
  ansible.builtin.pause:
    seconds: 180

- ansible.builtin.include_tasks: probes-api.yaml
- ansible.builtin.include_tasks: all-pods-running.yaml

- name: First-master - Wait for the DNS to be started (which is implicit that the overlay network works) before joining the other masters.
  ansible.builtin.shell: "kubectl -n kube-system get deploy coredns -o json | jq '.status.readyReplicas'"
  changed_when: false
  register: numberReady
  until: numberReady.stdout|int > 0
  retries: 120
  delay: 10
